{"version":3,"sources":["logo.png","ipad.png","iphone.png","mac.png","finale.png","harbor.png","homely.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","style","background","src","logo","width","height","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","mac","iphone","ipad","harbor","href","homely","finale","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,+QCuD5BC,MA7Cf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,sCAAsCC,MAAO,CAAEC,WAAY,YACxE,yBAAKC,IAAKC,IAAMJ,UAAU,WAAWK,MAAM,KAAKC,OAAO,KAAKC,IAAI,SAChE,uBAAGP,UAAU,gBAAb,cACA,4BAAQA,UAAU,iBAAiBQ,KAAK,SAASC,cAAY,WAAWC,cAAY,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBACpL,0BAAMb,UAAU,yBAElB,yBAAKA,UAAU,2BAA2Bc,GAAG,0BAC3C,wBAAId,UAAU,sBACZ,wBAAIA,UAAU,mBACZ,uBAAGA,UAAU,YAAb,QAA6B,0BAAMA,UAAU,WAAhB,kBAKrC,4BAAQA,UAAU,cAChB,qDACA,6FACA,yBAAKA,UAAU,WACb,yBAAKG,IAAKY,IAAKf,UAAU,MAAMO,IAAI,SACnC,yBAAKJ,IAAKa,IAAQhB,UAAU,UAAUO,IAAI,SAC1C,yBAAKJ,IAAKc,IAAMjB,UAAU,UAAUO,IAAI,SACxC,wCACA,yBAAKP,UAAU,YACb,yBAAKA,UAAU,eACb,yBAAKG,IAAKe,IAAQlB,UAAU,cAAcO,IAAI,SAC9C,uBAAGY,KAAK,gCAAR,WAEF,yBAAKnB,UAAU,eACb,yBAAKG,IAAKiB,IAAQpB,UAAU,cAAcO,IAAI,SAC9C,uBAAGY,KAAK,gCAAR,WAEF,yBAAKnB,UAAU,eACb,yBAAKG,IAAKkB,IAAQrB,UAAU,cAAcO,IAAI,SAC9C,uBAAGY,KAAK,gCAAR,gBClCMG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.22bea670.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.bc119e8c.png\";","module.exports = __webpack_public_path__ + \"static/media/ipad.f92f3ce4.png\";","module.exports = __webpack_public_path__ + \"static/media/iphone.64c995ed.png\";","module.exports = __webpack_public_path__ + \"static/media/mac.741e5f0e.png\";","module.exports = __webpack_public_path__ + \"static/media/finale.e91e5976.png\";","module.exports = __webpack_public_path__ + \"static/media/harbor.f28c4f26.png\";","module.exports = __webpack_public_path__ + \"static/media/homely.fc7063ae.png\";","import React from 'react';\nimport logo from './logo.png';\nimport ipad from './ipad.png';\nimport iphone from './iphone.png';\nimport mac from './mac.png';\nimport finale from './finale.png';\nimport harbor from './harbor.png';\nimport homely from './homely.png';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar navbar-expand-lg navbar-dark\" style={{ background: \"#414141\" }}>\n        <img src={logo} className=\"Nav-Logo\" width=\"60\" height=\"66\" alt=\"logo\" ></img>\n        <a className=\"navbar-brand\">Komodo LLC</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item active\">\n              <a className=\"nav-link\">Home <span className=\"sr-only\">(current)</span></a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n      <header className=\"App-header\">\n        <h2>People First Software</h2>\n        <p>Software on iOS, macOS, and Web that respects people's privacy</p>\n        <div className=\"Mockups\">\n          <img src={mac} className=\"Mac\" alt=\"logo\" />\n          <img src={iphone} className=\"Mockups\" alt=\"logo\" />\n          <img src={ipad} className=\"Mockups\" alt=\"logo\" />\n          <h1>Our Apps</h1>\n          <div className=\"Previews\">\n            <div className=\"App-Preview\">\n              <img src={harbor} className=\"App-Preview\" alt=\"logo\" />\n              <a href=\"https://harbor.komodollc.com\">Harbor</a>\n            </div>\n            <div className=\"App-Preview\">\n              <img src={homely} className=\"App-Preview\" alt=\"logo\" />\n              <a href=\"https://homely.komodollc.com\">Homely</a>\n            </div>\n            <div className=\"App-Preview\">\n              <img src={finale} className=\"App-Preview\" alt=\"logo\" />\n              <a href=\"https://finale.komodollc.com\">Finale</a>\n            </div>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}